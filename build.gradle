plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
}

repositories {
    maven { name 'Carpet'; url 'https://masa.dy.fi/maven' }
    maven { url "https://maven.nucleoid.xyz/" }
    maven { name 'Jitpack'; url 'https://jitpack.io' }
}

archivesBaseName = "${project.mod_id}-mc${project.minecraft_version}"
version = "${project.mod_version}"

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

loom {
    accessWidenerPath = file("src/main/resources/easyauth.accesswidener")
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Translations
    modImplementation(include("fr.catcore:server-translations-api:${project.server_translations_version}"))

    // Mods
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "carpet:fabric-carpet:${project.minecraft_version}-${project.carpet_core_version}"
    modImplementation "com.github.astei:lazydfu:${lazydfu_version}"

    // Password hashing
    // Argon2
    implementation(include("de.mkammerer:argon2-jvm:${argon2_version}"))

    // BCrypt
    implementation(include("at.favre.lib:bcrypt:${bcrypt_version}"))
    implementation(include("at.favre.lib:bytes:${bytes_version}"))

    // Storage
    // LevelDB database
    implementation(include("org.iq80.leveldb:leveldb:${leveldb_version}"))
    implementation(include("org.iq80.leveldb:leveldb-api:${leveldb_version}"))

    // MongoDB driver
    implementation(include("org.mongodb:mongodb-driver-sync:${mongodb_version}"))
    implementation(include("org.mongodb:mongodb-driver-core:${mongodb_version}"))
    implementation(include("org.mongodb:bson:${mongodb_version}"))

    // JNA lib
    include "net.java.dev.jna:jna:${jna_version}"

}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
}

jar {
    from "LICENCE"
}

processResources {
    inputs.property 'id', project.mod_id
    inputs.property 'name', project.mod_name
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand(['id': project.mod_id, 'name': project.mod_name, 'version': project.version])
    }
}

